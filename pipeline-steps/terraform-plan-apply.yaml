parameters:
- name: env
  type: string

- name: terraformVersion
  type: string
  default: 1.1.0

- name: location
  type: string
  default: 'UK South'
  values:
    - UK South
    - UK West

- name: project
  type: string
  default: application

- name: environmentServiceConnection
  type: string

- name: product
  type: string
  values:
    - vh
    - wowza

- name: activityName
  type: string
  values:
    - Video_Hearing_Wowza
    - Video_Hearing_Core

- name: tfStateResourceGroup
  type: string

- name: tfStateStorageAccountName 
  type: string

- name: dependsOnEnv
  default: ''

- name: destroyInfra
  type: boolean
  default: false

stages:
- stage: 'Terraform_Plan_${{ parameters.env }}'
  displayName: 'Terraform Plan ${{ parameters.env }}'
  ${{ if eq(parameters.dependsOnEnv, '') }}:
    dependsOn: Validate_Terraform_Code
  ${{ elseif eq(parameters.dependsOnEnv, '[]') }}:
    dependsOn: []
  ${{ else }}:
    dependsOn: 'Terraform_Apply_${{ parameters.dependsOnEnv }}'
  variables:
    - template: ../config/pipeline/vars/${{ lower(parameters.product) }}/common.yaml
    - template: ../config/pipeline/vars/${{ lower(parameters.product) }}/${{ lower(parameters.env) }}.yaml
  jobs: 
    - job: 'Terraform_Plan_${{ parameters.env }}'
      displayName: 'Terraform Plan ${{ parameters.env }}'
      variables:
      - name: environment
        value: ${{ parameters.env }}
      - group: vh-tenant-creds
      - template: ado-vars.yaml
        parameters:
          environment: ${{ parameters.env }}
        # If another project comes along and wants to use the same pipeline file then make this a variable in the UI
        # but it might be better to template the pipeline more and have a different pipeline file
        # so that someone doesn't pick the wrong var in the dropdown
        # same comment as above ^^
      steps:
      - checkout: self
      - checkout: vh-setup
      - script: ls -la $(Build.SourcesDirectory)
      # - script: cd vh-infra-core
      - ${{ if eq(parameters.activityName, 'Video_Hearing_Core') }}:
        - template: vh-tenant-replacement.yaml
          parameters:
            environment: ${{ variables.environment }}

        - template: ado-vars-to-tf.yaml
          parameters: 
            environment: ${{ variables.environment }}

      - template: templates\Azure\Common\unlock-resource-group.yml@templates
        parameters:
          subscriptionName: ${{parameters.environmentServiceConnection}}
          ${{ if eq(parameters.activityName, 'Video_Hearing_Wowza') }}:
            resourceGroupName: "vh-infra-wowza-${{variables.environment}}"
          ${{ else }}:
            resourceGroupName: "vh-infra-core-${{variables.environment}}" 
          lockName: "${{variables.environment}}-lock"

      - template: terraform-plan.yaml
        parameters:
          environment: ${{ variables.environment }}
          location: ${{ parameters.location }}
          project: ${{ parameters.project }}
          product: ${{ parameters.product }}
          builtFrom: $(Build.Repository.Name)
          tfversion: ${{ parameters.terraformVersion }}
          serviceConnection: ${{ parameters.environmentServiceConnection }}
          tfStateResourceGroup: ${{ lower(parameters.tfStateResourceGroup) }}
          tfStateStorageAccountName: ${{ lower(parameters.tfStateStorageAccountName) }}
          activity_name: ${{ parameters.activityName  }}
          destroyInfra: ${{ parameters.destroyInfra }}
          ${{ if eq(parameters.activityName, 'Video_Hearing_Core') }}:
            additional_tf_var: $(ado_vars_to_tf.ado_vars)

################################################
# Terraform Apply Dev. #########################

- stage: 'Terraform_Apply_${{ parameters.env }}'
  displayName: 'Terraform Apply ${{ parameters.env }}'
  dependsOn: 'Terraform_Plan_${{ parameters.env }}'
  variables:
    - name: environment
      value: ${{ parameters.env }}
    - group: vh-tenant-creds
    - template: ado-vars.yaml
      parameters:
        environment: ${{ parameters.env }}
      # If another project comes along and wants to use the same pipeline file then make this a variable in the UI
      # but it might be better to template the pipeline more and have a different pipeline file
      # so that someone doesn't pick the wrong var in the dropdown
    # same comment as above ^^
    
    - template: ../config\pipeline\vars\${{ lower(parameters.product) }}/common.yaml
    - template: ../config\pipeline\vars\${{ lower(parameters.product) }}/${{ lower(parameters.env) }}.yaml
  jobs:
    - deployment: 'Terraform_Apply_${{ parameters.env }}'
      displayName: Terraform Apply ${{ parameters.env }}
      continueOnError: false
      environment: ${{ parameters.env }}
      strategy:
        runOnce:
          deploy:
            steps:

            - template: terraform-apply.yaml
              parameters:
                environment: ${{ parameters.env }}
                location: ${{ parameters.location }}
                project: ${{ parameters.project }}
                product: ${{ parameters.product }}
                builtFrom: $(Build.Repository.Name)
                tfversion: ${{ parameters.terraformVersion }}
                serviceConnection: ${{ parameters.environmentServiceConnection }}
                tfStateResourceGroup: ${{ lower(parameters.tfStateResourceGroup) }}
                tfStateStorageAccountName: ${{ lower(parameters.tfStateStorageAccountName) }}
                activity_name: ${{ parameters.activityName  }}
                ${{ if eq(parameters.activityName, 'Video_Hearing_Core') }}:
                  additional_tf_var: $(ado_vars_to_tf.ado_vars)

    - ${{ if eq(parameters.destroyInfra, false) }}:
      - job: SqlAccess
        displayName: SQL AD Access 
        dependsOn: Terraform_Apply_${{ parameters.env }}
        steps:
          - template: sql-access.yaml
            parameters:
              azureSubscription: DTS-SHAREDSERVICES-${{ parameters.env }}-Video Hearings
              sqlServerResourceGroup: vh-infra-core-${{ parameters.env }}
              sqlServerName: vh-infra-core-${{ parameters.env }}
              dbAccess:
                - user: 'DTS SDS Developers'
                  databaseNames: 
                    - vhbookings
                    - vhnotification
                    - vhvideo
                  roles:
                    - db_datareader
                    - ${{ if ne(lower(parameters.env), 'prod') }}:
                      - db_datawriter
                - ${{ if ne(lower(parameters.env), 'demo') }}:
                  - user: mi-ingestion-adf-${{ lower(parameters.env)}}
                    databaseNames:
                      - vhbookings
                      - vhnotification
                      - vhvideo
                    roles:
                      - db_datareader