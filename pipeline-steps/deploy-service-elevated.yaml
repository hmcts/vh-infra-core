parameters:
  - name: environment
    type: string
  - name: location
    type: string
  - name: stack
    type: string
  - name: project
    type: string
  - name: tfversion
    type: string
  - name: activity_name
    type: string
  - name: serviceConnection
    type: string
  - name: run_stage
    type: string
  - name: builtFrom
    type: string
  - name: product
    type: string
  - name: state_sub 
    type: string
    
steps:

  - template: keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      environment: ${{ parameters.environment }}

# lowercase $env variable comes from the above template

  - task: Bash@3
    displayName: 'Subscription Replacement'
    inputs:
      targetType: 'inline'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ parameters.stack }}'
      script: |
            sed -i 's|REPLACE_ME|$(ARM_SUBSCRIPTION_ID)|g' '00-init.tf'

  - task: AzureCLI@2
    displayName: 'GlobalNetworkPeering SC Details'
    name: GlobalNetworkPeering
    inputs: 
      azureSubscription: 'GlobalNetworkPeering'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      addSpnToEnvironment: true
      InlineScript: |
        Write-Host "##vso[task.setvariable variable=GNP_CLIENT_ID;isOutput=true]$($env:servicePrincipalId)"
        Write-Host "Client ID: $($env:servicePrincipalId)"
        Write-Host "##vso[task.setvariable variable=GNP_CLIENT_SECRET;isOutput=true]$($env:servicePrincipalKey)"
        Write-Host "##vso[task.setvariable variable=GNP_TENANT_ID;isOutput=true]$($env:tenantId)"
        Write-Host "Tenant ID: $($env:tenantId)"
        $subscriptionId = az account show --query id -o tsv
        Write-Host "##vso[task.setvariable variable=GNP_SUBSCRIPTION_ID;isOutput=true]$subscriptionId"
        Write-Host "Subscription ID: $subscriptionId"

  - bash: |
      variableName="vars"
      
      variables=""
      variables="${variables} -var \"network_client_id=${GNP_CLIENT_ID} \""
      variables="${variables} -var \"network_client_secret=${GNP_CLIENT_SECRET} \""
      variables="${variables} -var \"network_tenant_id=${GNP_TENANT_ID} \""

      echo "Variables set as: "
      echo "${variables}"
      echo "##vso[task.setvariable variable=$variableName;isOutput=true]${variables}"
    displayName: 'Set Shared Services TF Variables'
    name: tfVariables
    env:
      GNP_CLIENT_ID: $(GlobalNetworkPeering.GNP_CLIENT_ID) 
      GNP_CLIENT_SECRET: $(GlobalNetworkPeering.GNP_CLIENT_SECRET) 
      GNP_TENANT_ID: $(GlobalNetworkPeering.GNP_TENANT_ID) 

  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.tfversion }}'
    inputs:
          terraformVersion: ${{ parameters.tfversion }}

  - task: TerraformCLI@0
    displayName: terraform init
    inputs:
          command: init
          terraformVersion: ${{ parameters.tfversion }}
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ parameters.stack }}'
          backendType: azurerm
          backendServiceArm: ${{ parameters.serviceConnection }}
          backendAzureRmResourceGroupName: 'azure-control-${{ parameters.environment }}-rg'
          backendAzureRmResourceGroupLocation: ${{ parameters.location }}
          backendAzureRmStorageAccountName: $(controlStorageAccount)
          backendAzureRmStorageAccountSku: Standard_LRS
          backendAzureRmContainerName: subscription-tfstate
          backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/${{ lower(parameters.environment) }}/${{ parameters.stack }}/terraform.tfstate'
          commandOptions: '-backend-config=subscription_id=${{ parameters.state_sub }}'


  - task: TerraformCLI@0
    displayName: terraform validate
    inputs:
          command: validate
          terraformVersion: ${{ parameters.tfversion }}
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.stack }}


  - task: TerraformCLI@0
    displayName: terraform plan
    inputs:
          command: plan
          terraformVersion: ${{ parameters.tfversion }}
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.stack }}
          environmentServiceName: ${{ parameters.serviceConnection }}
          publishPlanResults: vh-shared-infra.tfplan
          commandOptions: >
            -out tfplan-${{ parameters.project }}-${{ lower(parameters.environment) }}-${{ parameters.stack }}
            -var control_vault=$(controlKeyVault)
            -var environment=${{ lower(parameters.environment) }}
            -var project=${{ parameters.project }}
            -var builtFrom=${{ parameters.builtFrom }}
            -var product=${{ parameters.product }}
            -var activity_name=${{ parameters.activity_name }}
            -var-file $(System.DefaultWorkingDirectory)/config/terraform/${{ parameters.project }}/vars/${{ parameters.stack }}/$(env).tfvars
            ${variables}

  - task: TerraformCLI@0
    displayName: Terraform apply
    #condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), not(contains('${{ parameters.run_stage }}', 'CI')))
    inputs:
      command: apply
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.stack }}
      environmentServiceName: ${{ parameters.serviceConnection }}
      commandOptions: '--auto-approve tfplan-${{ parameters.project }}-${{ lower(parameters.environment) }}-${{ parameters.stack }}'
