parameters:
  - name: tfversion
    type: string

  - name: environment
    type: string

  - name: location
    type: string

  - name: stack
    type: string

  - name: project
    type: string
    default: application

  - name: activity_name
    type: string

  - name: serviceConnection
    type: string

  - name: builtFrom
    type: string

  - name: product
    type: string

  - name: tfStateResourceGroup
    type: string

  - name: tfStateStorageAccountName 
    type: string
    
steps:
#  - template: keyvault-read.yaml
#    parameters:
#      serviceConnection: $(serviceConnection)
#      environment: ${{ parameters.environment }}
      
  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.tfversion }}'
    inputs:
          terraformVersion: ${{ parameters.tfversion }}

  - task: TerraformCLI@0
    displayName: Terraform Init
    inputs:
          command: init
          terraformVersion: ${{ parameters.tfversion }}
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ parameters.stack }}'
          backendType: azurerm
          backendServiceArm: ${{ parameters.serviceConnection }}
          backendAzureRmResourceGroupName: ${{ lower(parameters.tfStateResourceGroup) }}
          backendAzureRmResourceGroupLocation: ${{ parameters.location }}
          backendAzureRmStorageAccountName: ${{ lower(parameters.tfStateStorageAccountName) }}
          backendAzureRmStorageAccountSku: Standard_LRS
          backendAzureRmContainerName: tfstate
          backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/${{ lower(parameters.environment) }}/${{ parameters.stack }}/terraform.tfstate'

  - template: templates/tests/terraform/allTests.yaml@templates
    parameters:
      terraformPath: '$(System.DefaultWorkingDirectory)/terraform/${{ parameters.stack }}'