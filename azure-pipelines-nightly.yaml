name: VH Shared Services AKS Azure Infrastructure Nightly Drift Check Pipeline
trigger:
  - none

pr:
  - none

schedules:
- cron: "0 21 * * 1,2,3,4,5"
  displayName: Nightly
  branches:
    include:
    - master
  always: true
- cron: "0 21 1 * *"
  displayName: Monthly
  branches:
    include:
    - master
  always: true


resources:
  repositories:
    - repository: templates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts
      
parameters:
  #- name: Run_Stage
  #  displayName: Stage to Run
  #  type: string
  #  default: 'Check_Drift'
  #  values:
  #    - Check_Drift

  - name: location
    displayName: Location
    type: string
    default: 'UK South'
    values:
    - 'UK South'
    - 'UK West'
  
  #- name: envs
  #  displayName: Environment
  #  type: string
  #  values:
    #- ITHC
    #- DEV
    #- DEMO
  #  - SBOX
    #- TEST
    #- STG
    #- PROD
  #  - SBOX


variables:
  - name: envs
    value: [SBOX, SBOX]
  - name: gaServiceConnection
    value: DTS-SHAREDSERVICES-${{ var.envs }}-Video Hearings
  - name: tfversion
    value: 1.1.0
  # If another project comes along and wants to use the same pipeline file then make this a variable in the UI
  # but it might be better to template the pipeline more and have a different pipeline file
  # so that someone doesn't pick the wrong var in the dropdown
  - name: project
    value: application
  # same comment as above ^^
  - name: serviceConnection
    value: DTS-SHAREDSERVICES-${{ parameters.envs }}-Video Hearings #OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  - name: location
    value: 'UK South'


stages:

  - stage: Validate
    displayName: 'Validate Infra'
    jobs: 
      - template: pipeline-steps/terraform-validate.yaml
        parameters:
          terraformPath: $(Build.SourcesDirectory)/terraform
          tfversion: $(tfversion)

  - stage: Video_Hearing_Core
    displayName: 'Video_Hearing_Core'
    #condition: or(contains('${{ parameters.Run_Stage }}', 'Video_Hearing_Core'), contains('${{ parameters.Run_Stage }}', 'Check_Drift'))
    jobs:
      - ${{each env in var.envs}}:
        - job: Video_Hearing_Core_${{env}}
          pool:
            vmImage: 'Ubuntu 18.04'
          variables:
            - group: vh-tenant-creds
            - group: vh-alerting-Logic-App-Details
          steps:
            - template: pipeline-steps/vh-tenant-replacement.yaml
              parameters:
                vh_tenant_id: $(vh_tenant_id)
                vh_client_secret: $(vh_client_secret)
                vh_client_id: $(vh_client_id)
                environment: ${{ env }}

            - template: pipeline-steps/tfplan-drift-check.yaml
              parameters:
                environment: ${{ env }}
                location: ${{ parameters.location }}
                stack: '09-video-hearing-core'
                project: $(project)
                product: 'vh'
                builtFrom: $(Build.Repository.Name)
                tfversion: $(tfversion)
                serviceConnection: $(serviceConnection)
                activity_name: Video_Hearing_Core
                run_stage: ${{ parameters.Run_Stage }}
                state_sub: $(vh_tf_state_sub)
                logicAppUrl: $(vh-logic-app-url)

  - stage: Video_Hearing_Wowza
    displayName: 'Video_Hearing_Wowza'
    #condition: or(contains('${{ parameters.Run_Stage }}', 'Video_Hearing_Wowza'), contains('${{ parameters.Run_Stage }}', 'Check_Drift'))
    jobs:
      - ${{each env in var.envs}}:
        - job: Video_Hearing_Wowza
          pool:
            vmImage: 'Ubuntu 18.04'
          variables:
              - group: vh-tenant-creds
              - group: vh-alerting-Logic-App-Details
          steps:
            - template: pipeline-steps/sshkey-download.yaml
            - template: pipeline-steps/tfplan-drift-check.yaml
              parameters:
                environment: ${{ env }}
                location: ${{ parameters.location }}
                stack: '10-video-hearing-wowza'
                project: $(project)
                product: 'wowza'
                builtFrom: $(Build.Repository.Name)
                tfversion: $(tfversion)
                serviceConnection: $(serviceConnection)
                activity_name: Video_Hearing_Wowza
                run_stage: ${{ parameters.Run_Stage }}
                state_sub: $(vh_tf_state_sub)
                logicAppUrl: $(vh-logic-app-url)